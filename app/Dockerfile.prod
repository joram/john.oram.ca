# Multi-stage production build - optimized for speed and memory
FROM node:20-alpine AS builder

# Install system dependencies
RUN apk add --no-cache libc6-compat

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with memory optimization
RUN npm i && npm cache clean --force

# Copy source code
COPY . .

# Build with maximum memory optimization
ENV GENERATE_SOURCEMAP=false
ENV DISABLE_ESLINT_PLUGIN=true
ENV CI=true
ENV NODE_ENV=production

# Build the application
RUN npm run build:prod

# Production stage - nginx serving static files
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Create necessary directories and set permissions for non-root user
RUN mkdir -p /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp \
    /var/log/nginx \
    /var/run/nginx && \
    chown -R nginx:nginx /var/cache/nginx \
    /var/log/nginx \
    /var/run/nginx \
    /usr/share/nginx/html

# Copy built static files from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Create nginx configuration for React SPA
RUN echo 'user nginx; \
worker_processes auto; \
error_log /var/log/nginx/error.log notice; \
pid /var/run/nginx/nginx.pid; \
\
events { \
    worker_connections 1024; \
} \
\
http { \
    include /etc/nginx/mime.types; \
    default_type application/octet-stream; \
    \
    log_format main "$remote_addr - $remote_user [$time_local] \"$request\" " \
                    "$status $body_bytes_sent \"$http_referer\" " \
                    "\"$http_user_agent\" \"$http_x_forwarded_for\""; \
    \
    access_log /var/log/nginx/access.log main; \
    \
    sendfile on; \
    tcp_nopush on; \
    keepalive_timeout 65; \
    \
    server { \
        listen 80; \
        server_name localhost; \
        root /usr/share/nginx/html; \
        index index.html; \
        \
        # Handle client-side routing \
        location / { \
            try_files $uri $uri/ /index.html; \
        } \
        \
        # Cache static assets \
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { \
            expires 1y; \
            add_header Cache-Control "public, immutable"; \
        } \
        \
        # Security headers \
        add_header X-Frame-Options "SAMEORIGIN" always; \
        add_header X-Content-Type-Options "nosniff" always; \
        add_header X-XSS-Protection "1; mode=block" always; \
        add_header Referrer-Policy "strict-origin-when-cross-origin" always; \
    } \
}' > /etc/nginx/nginx.conf

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Expose port
EXPOSE 80

# Switch to nginx user
USER nginx

# Start nginx
CMD ["nginx", "-g", "daemon off;"]




