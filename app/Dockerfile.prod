# Multi-stage production build - optimized for speed and memory
FROM node:20-alpine AS builder

# Install system dependencies
RUN apk add --no-cache libc6-compat

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with memory optimization
RUN npm ci --only=production --no-optional --silent && \
    npm cache clean --force

# Install dev dependencies for build only
RUN npm ci --only=dev --no-optional --silent && \
    npm cache clean --force

# Copy source code
COPY . .

# Build with maximum memory optimization
ENV NODE_OPTIONS="--max-old-space-size=768"
ENV GENERATE_SOURCEMAP=false
ENV DISABLE_ESLINT_PLUGIN=true
ENV CI=true
ENV NODE_ENV=production

# Build the application
RUN npm run build:prod

# Production stage - minimal runtime
FROM node:20-alpine AS production

# Install only essential system dependencies
RUN apk add --no-cache libc6-compat curl

# Create app directory and non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production --no-optional --silent && \
    npm cache clean --force && \
    rm -rf /tmp/*

# Copy built application and server
COPY --from=builder --chown=nextjs:nodejs /app/build ./build
COPY --chown=nextjs:nodejs server ./server

# Switch to non-root user
USER nextjs

# Set production environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=256"
ENV PORT=3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Start production server
CMD ["npm", "run", "start:prod"]

