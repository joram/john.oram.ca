# Single-stage production build - optimized for speed
FROM node:20-alpine

# Install system dependencies
RUN apk add --no-cache libc6-compat curl

# Create app directory and non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY --chown=nextjs:nodejs package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --silent && \
    npm cache clean --force

# Copy source code
COPY --chown=nextjs:nodejs . .

# Build with maximum speed optimization
ENV NODE_OPTIONS="--max-old-space-size=1024"
ENV GENERATE_SOURCEMAP=false
ENV DISABLE_ESLINT_PLUGIN=true
ENV CI=true
ENV NODE_ENV=production
ENV FAST_REFRESH=false
ENV TSC_COMPILE_ON_ERROR=true
ENV ESLINT_NO_DEV_ERRORS=true
ENV DOCKER_BUILDKIT=1
ENV BUILDKIT_PROGRESS=plain

# Build the application
RUN npm run build:fast

# Remove dev dependencies to reduce image size
RUN npm prune --production && \
    npm cache clean --force && \
    rm -rf /tmp/*

# Switch to non-root user
USER nextjs

# Set production environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=256"
ENV PORT=3000
# HTTP-only configuration
ENV FORCE_HTTPS=false
ENV HTTPS_REDIRECT=false

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Start production server
CMD ["npm", "run", "start:prod"]
